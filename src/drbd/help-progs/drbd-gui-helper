#!/usr/bin/perl

# This file is part of DRBD Management Console by LINBIT HA-Solutions GmbH,
# written by Rasto Levrinc.
#
# Copyright (C) 2009, LINBIT HA-Solutions GmbH.
#
# DRBD Management Console is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# DRBD Management Console is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with drbd; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

use strict;
use warnings;
$! = 1;

use Fcntl qw(F_GETFL F_SETFL O_NONBLOCK);
use POSIX qw(:errno_h); # EAGAIN

use Socket;

$ENV{LANG}="C";
$ENV{LANGUAGE}="C";
for (keys %ENV) {
	$ENV{$_} = "C" if /^LC_/;
}

our $DEBUG = 0;
my $option = shift || die;

if ($option eq "all") {
	print "net-info\n";
	get_net_info();
	print "disk-info\n";
	get_disk_info();
	print "filesystems-info\n";
	get_filesystems_info();
	print "mount-points-info\n";
	get_mount_points_info();
	print "gui-info\n";
	get_gui_info();
	print "installation-info\n";
	get_installation_info();
	print "version-info\n";
	get_version_info();
} elsif ($option eq "hw-info") {
	print "net-info\n";
	get_net_info();
	print "disk-info\n";
	get_disk_info();
	print "filesystems-info\n";
	get_filesystems_info();
	print "mount-points-info\n";
	get_mount_points_info();
	#print "gui-info\n";
	#get_gui_info();
	print "installation-info\n";
	get_installation_info();
	print "version-info\n";
	get_version_info();
} elsif ($option eq "installation-info") {
	get_installation_info();
} elsif ($option eq "get-net-info") {
	get_net_info();
} elsif ($option eq "get-disk-info") {
	get_disk_info();
} elsif ($option eq "get-filesystems-info") {
	get_filesystems_info();
} elsif ($option eq "get-gui-info") {
	get_gui_info();
} elsif ($option eq "get-mount-point-info") {
	get_mount_points_info();
} elsif ($option eq "get-drbd-info") {
	get_drbd_info();
} elsif ($option eq "get-drbd-events") {
	get_drbd_events();
} elsif ($option eq "get-old-style-resources") {
	get_old_style_resources(@ARGV);
} elsif ($option eq "get-lsb-resources") {
	get_lsb_resources(@ARGV);
} elsif ($option eq "get-drbd-xml") {
	get_drbd_xml();
} elsif ($option eq "get-cluster-events") {
	get_cluster_events();
} elsif ($option eq "get-cluster-metadata") {
	get_cluster_metadata();
} elsif ($option eq "get-cluster-versions") {
	print get_cluster_versions();
} else {
	die "unknown command";
}

sub print_debug {
	print "$_[0]\n" if $DEBUG;
}

sub net_info_error {
	my $error = shift;
	print STDERR "cannot parse ifconfig: $error\n";
	exit 1;
}

# get_net_info()
#
# parses ifconfig output and prints out interface, ip and mac address one
# interface per line. "lo" interface is skipped.
sub get_net_info {
	my $dev  = "";
	my $mac  = "";
	my $ip   = "";
	my $mask = "";
	for (`/sbin/ifconfig`) {
		if (!$dev) {
			($dev) = /^(\S+)/ or net_info_error("no dev");
			last if $dev eq "lo";
			($mac) = /\sHWaddr\s+(\S+)/ or net_info_error("no mac address ($dev)");
		} else {
			if (/^\s+inet addr:(\S+).*?\s+Mask:(\S+)/) {
				$ip = $1;
				$mask = $2;
			}
		}
		if (/^$/) {
			if ($dev && $ip && $mac && $mask) {
				print "$dev $ip $mac $mask\n";
			}
			$dev = "";
		}
	}
}

sub disk_info_error {
	my $error = shift;
	print STDERR "ERROR: problem getting disk info: $error\n";
	exit 1;
}

sub disk_info_warning {
	my $warning = shift;
	print STDERR "WARNING: $warning\n";
}

# get_drbd_devs
# Returns hash with drbd devices as keys and the underlying blockd evices as their
# value.
sub get_drbd_devs {
	my %drbd_devs;
	for (qx(for f in `find /dev/drbd/by-disk/ -name '*' 2>/dev/null`;do 
			if [ -L \$f ]; then
				echo -n "\$f ";
				readlink -f \$f;
			fi;
	     	done)) {
		my ($dev, $drbd) = split;
		$dev =~ s!^/dev/drbd/by-disk/!/dev/!;
		$drbd_devs{$drbd} = $dev;
	}
	return \%drbd_devs;
}


# get_mount
#
# returns hash with block device as a key and mount point with filesystem as
# value. LVM device name is converted to the /dev/group/name from
# /dev/group-name. If there is - in the group or name, it is escaped as --, so
# it is unescaped here. /bin/mount is used rather than cat /proc/mounts,
# because in the output from /bin/mount is lvm device name always in the same
# form.
sub get_mount {
	my $lvm_devs = shift;
	my $drbd_devs = shift;
	my %dev_to_mount;
	for (`/bin/mount`) {
		# /dev/md1 on / type xfs (rw)
		# /dev/mapper/vg00--sepp-sources on /mnt/local-src type xfs (rw)
		if (m!/dev/(\S+)\s+on\s+(\S+)\s+type\s+(\S+)!) {
			my ($dev, $mountpoint, $filesystem) = ($1, $2, $3);
			$dev = "/dev/$dev";
			if ($$drbd_devs{"$dev"}) {
				$dev = $$drbd_devs{"$dev"};
			}
			if ($dev =~ m!^/dev/mapper/(.+)!) {
				# convert mapper/vg00--sepp-sources to vg00-sepp/sources
				my ($group, $name) = map { s/--/-/g;$_ } $1 =~ /(.*[^-])-([^-].*)/;
				if ($group && $name) { # && !$$lvm_devs{"$group/$name"}) {
					$dev = "$group/$name";
				}
			}
			print_debug("mount: $dev, $mountpoint, $filesystem");
			$dev_to_mount{$dev} = "$mountpoint $filesystem";
		}
	}
	return \%dev_to_mount;
}

#
# Returns hash with free disk space
sub get_used {
	my $lvm_devs = shift;
	my $drbd_devs = shift;
	my %dev_to_used;
	for (`/bin/df -P`) {
		if (m!(\S+)\s+\d+\s+\d+\s+\d+\s+(\d+)%\s+!) {
			my ($dev, $used) = ($1, $2);
			if ($$drbd_devs{$dev}) {
				$dev = $$drbd_devs{$dev};
			} elsif ($dev =~ m!^/dev/mapper/(.+)!) {
				# convert mapper/vg00--sepp-sources to vg00-sepp/sources
				my ($group, $name) = map { s/--/-/g;$_ } $1 =~ /(.*[^-])-([^-].*)/;
				if ($group && $name) { # && !$$lvm_devs{"$group/$name"}) {
					$dev = "/dev/$group/$name";
				}
			}
			$dev_to_used{$dev} = $used;
		}
	}
	return \%dev_to_used;
}

# get_swaps
# returns hash with swaps as keys.
sub get_swaps {
	open SW, "/proc/swaps" or disk_info_error("cannot open /proc/swaps");
	my %swaps;
	while (<SW>) {
		next if /^Filename/; # header
		my ($swap_dev) = split;
		if ($swap_dev =~ m!^/dev/mapper/(.+)!) {
			# convert
			my ($group, $name) = map { s/--/-/g;$_ } $1 =~ /(.*[^-])-([^-].*)/;
			if ($group && $name) {
				$swap_dev = "/dev/$group/$name";
			}
		}
		$swaps{$swap_dev}++;
	}
	return \%swaps;
}

# get_lvm
#
# returns 4 hashes. One hash that maps lvm group to the physical volume. A hash
# that maps major and minor kernel numbers to the lvm device name. Major and
# minor numbers are separated with ":". And a hash that contains block devices
# that have lvm on top of them.
sub get_lvm {
	if (! -e "/sbin/pvdisplay" && ! -e "/usr/sbin/pvdisplay") {
		return ({}, {}, {}, {});
	}

	# create physical volume to volume group hash
	my %group_to_pv;
	for (`pvdisplay -C --noheadings -o pv_name,vg_name 2>/dev/null`) {
		my ($pv_name, $vg_name) = split;
		$pv_name =~ s!^/dev/!!;
		print_debug("pv: $pv_name, $vg_name");
		$group_to_pv{$vg_name} = $pv_name;
	}

	my %major_minor_to_dev;
	my %devs_with_lvm;
	my %lvm_devs;

	# create major:minor kernel number to device hash
	for (`lvdisplay -C --noheadings -o lv_kernel_major,lv_kernel_minor,vg_name,lv_name 2>/dev/null`) {
		my ($major, $minor, $group, $name) = split;
		print_debug("get_lvm: ($major, $minor, $group, $name, $group_to_pv{$group})");
		$major_minor_to_dev{"$major:$minor"} = "$group/$name";
		$devs_with_lvm{$group_to_pv{$group}}++;
		$lvm_devs{"$group/$name"}++;

	}
	return (\%group_to_pv,
		\%major_minor_to_dev,
		\%devs_with_lvm,
		\%lvm_devs);
}

# get_raid()
#
# returns hash with devices that are in the raid.
sub get_raid {
	return if !-e "/proc/mdstat";
	open MDSTAT, "/proc/mdstat" or disk_info_error("cannot open /proc/mdstat");
	# md1 : active raid1 sdb2[1] sda2[0]
	#	   9775488 blocks [2/2] [UU]
	my %devs_in_raid;

	# create hash with devices that are in the raid.
	while (<MDSTAT>) {
		if (/^(md\d+)\s+:\s+(.+)/) {
			 my $dev = $1;
			 my ($active, $type, @members) = split /\s+/, $2;
			 print_debug("get_raid: $dev ($active, $type, @members)");
			 for my $member (@members) {
				$member =~ s/\[\d+\]$//;
				$devs_in_raid{"$member"}++;
			 }
		}
	}
	return \%devs_in_raid;
}

sub get_device_mapper_major {
	my $m = 253;
	open DM, "/proc/devices" or disk_info_error("cannot open /proc/devices");
	while (<DM>) {
		$m = $1 if /^(\d+)\s+device-mapper/;
	}
	return $m;
	close DM;
}

# get_disk_info()
#
# parses /proc/partitions and writes device and size of one block device per
# line separated by one space. If block device is mounted, mount point and 
# file system type is attached. 
# It doesn't show block devices, that are in raid or there is lvm on top of
# them. In this case only device names of raid or lvm are used.
sub get_disk_info {
	my $devs_in_raid = get_raid();
	my ($group_to_pv, $major_minor_to_dev, $devs_with_lvm, $lvm_devs) = get_lvm();
	my $drbd_devs = get_drbd_devs();
	my $dev_to_mount = get_mount($lvm_devs, $drbd_devs);
	my $dev_to_used = get_used($lvm_devs, $drbd_devs);
	my $dev_to_swap = get_swaps();
	# read partition table
	open PT, "/proc/partitions" or disk_info_error("cannot open /proc/partitions");
	my @raids;
	my @lvms;
	my @disks;
	my @partitions;
	my @info;
	my $device_mapper_major = get_device_mapper_major();
	while (<PT>) {
		next if /^major / || /^$/; # skip header
		chomp;
		my ($major, $minor, $blocks, $name) = split;
		next if $$devs_with_lvm{$name} || $$devs_in_raid{$name};
		my $device;
		if ($major == 3
		    || $major == 8
		    || $major == 72
		    || $major == 202
		    || $major == 104) { # ide and scsi disks
		    	# 104 cciss0
			if ($_ !~ /\d$/) { # whole disk
				push @disks, $name;
				next;
			} elsif ($blocks == 1) { # extended partition
				next;
			} else {
				$device = "/dev/$name";
			}
		} elsif ($major == 9) { # raid
			$device = "/dev/$name";
		} elsif ($major == $device_mapper_major) {
			if ($$major_minor_to_dev{"$major:$minor"}) {
				$device = "/dev/".$$major_minor_to_dev{"$major:$minor"};
				my $dev = $$major_minor_to_dev{"$major:$minor"};
				$dev = $name if !$dev;
				$device = "/dev/".$dev;
			} else {
				$device = "/dev/$name";
			}

		} elsif ($name =~ /^drbd/) {
			# disk_info_warning("skiping: $_");
			next;
		} else {
			disk_info_warning("unknown partition: $_");
			next;
		}
		my $info = "$device $blocks";
		$info.= " ".$$dev_to_mount{$device} if $$dev_to_mount{$device};
		$info.= " swap swap" if $$dev_to_swap{$device};
		$info.= " ".$$dev_to_used{$device} if defined $$dev_to_used{$device};
		$info.= "\n";
		push @info, $info;
	}
	close PT;
	
	print join "", map { $_->[0] } 
			   sort { 
			    ($a->[1] =~ /(^\D+)/)[0] cmp ($b->[1]  =~ /(^\D+)/)[0] 
			  			||
			    (($a->[1] =~ /(\d+$)/)[0] || 0) <=> (($b->[1]  =~ /(\d+$)/)[0] || 0) 
			   } map { [$_, /([^\/]+?) /] } @info;
}

# get_filesystems_info
#
# prints available filesystems on this host.
sub get_filesystems_info {
        for (`ls /sbin/mkfs.* 2>/dev/null`) {
                chomp;
                my ($fs) = /([^\.]+)$/;
                `modinfo $fs >/dev/null 2>&1 || grep '\\<$fs\\>' /proc/filesystems`;
                print "$fs\n" if !$?;
        }
}

# get_mount_points_info
# 
# prints directories in the /mnt directory
sub get_mount_points_info {
	my $dir = "/mnt";
	if (opendir(DIR, $dir)) {
		print "$dir/$_\n" for (sort grep { $_ !~ /^\./ && -d "$dir/$_" } readdir(DIR));
		closedir DIR;
	}
}

# get_gui_info()
#
sub get_gui_info {
	if (open FH, "/var/lib/heartbeat/drbdgui.cf") {
		while (<FH>) {
			print;
		}
		close FH;
	}
}

# get_installation_info()
#
sub get_installation_info {
	print get_cluster_versions();
	my $hn = `hostname`;
	chomp $hn;
	print "hn:$hn\n";
}
# get_version_info()
#
sub get_version_info {
	my $cmd = 
	  'uname; uname -m; uname -r; '
	 .'for d in redhat debian gentoo SuSE; do '
	   .'v=`head -1 -q /etc/"$d"_version /etc/"$d"-release 2>/dev/null`; '
	   .'if [ ! -z "$v" ]; then echo "$v"; echo "$d"; fi; '
	 .'done; '
	 .'lsb_release -i -r 2>/dev/null '
	 .'| sed "s/CentOS/redhat/"|sed "s/SUSE LINUX/suse/" '
	 .'| perl -lne "print lc((split /:\s*/)[1])"';
	 print `$cmd`;
}

sub get_drbd_events {
	my $kidpid;
	my $pid = $$;
	die "can't fork: $!" unless defined($kidpid = fork());
	# TODO: 
	if ($kidpid) {
		exec("/sbin/drbdsetup /dev/drbd0 events -a -u");
	} else {
		sleep 20;
		kill("TERM", $pid);
	}
}

sub get_drbd_info {
	my ($version, $api) = `echo|drbdadm help` =~ /Version:\s+(\S+)\s+\(api:(\d+)\)/;
	if ($version && $api) {
		print "<drbd-status version=\"$version\" api=\"$api\">\n";
	} else {
		print "<drbd-status>unknown</drbd-status>\n";
		return;
	}
	print "	<resources>\n";
	# since 8.3 drbdadm status can be used
	my @resources = split /\s+/, `drbdadm sh-resources`; 
	chomp (my @cstates = `drbdadm cstate all`);
	chomp (my @roles  = `drbdadm state all || drbdadm role all`);
	chomp (my @dstates = `drbdadm dstate all`);
	my @sync_progress;
	for (my $i = 0; $i<@resources; $i++) {
		my $res = $resources[$i];
		my $cs = $cstates[$i];
		my ($ro1, $ro2) = split /\//, $roles[$i];
		my ($ds1, $ds2) = split /\//, $dstates[$i];

		print "		<resource res=\"$res\"";
		print " cs=\"$cs\"";
		print " ro1=\"$ro1\"";
		print " ro2=\"$ro2\"";
		print " ds1=\"$ds1\"";
		print " ds2=\"$ds2\"";

		if (defined $sync_progress[$i]) {
			print " synced=\"$sync_progress[$i]\"";
		} elsif ($cs =~ /^Sync/) {
			if (open my $proc, "/proc/drbd") {
				my $index = -1;
				while (<$proc>) {
					if (/^\s*(\d+):/) {
						$index++;
					} elsif (m!\s+sync'ed:\s+(\d+\.\d+)\%!) {
						$sync_progress[$index] = $1;
						if ($i == $index) {
							print " synced=\"$sync_progress[$i]\"";
						}
					}
				}
			}
		}
		print " />\n";
	}
	print "	</resources>\n";
	print "</drbd-status>\n";
}

sub is_smaller_v {
	my $v 	   = shift;
	my $than_v = shift;
	my @v_parts = split /\./, $v;
	my @than_v_parts = split /\./, $than_v;

	return 0 if @v_parts != @than_v_parts;

	for (@v_parts) {
		my $than_v_part = shift @than_v_parts;
		return 0 if $_ > $than_v_part;
		return 1 if $_ < $than_v_part;
	}
	return 0;
}

sub get_message {
	my $socket = shift;
        my $msg = "";
        while (<$socket>) {
                if ($_ eq "<<<\n") {
                        return $msg;
                }
                if ($_ !~ />>>/) {
                        $msg .= $_;
                }
        }
        die;
}

sub cib_message {
	my $socket = shift;
	my $msg = shift;
	$msg = ">>>\n$msg<<<\n";
	printf $socket pack "L", length $msg;
        printf $socket pack "L", 0xabcd;
        print $socket $msg;
}

#
# Return heartbeat lib path. It can be /usr/lib/heartbeat or
# /usr/lib64/heartbeat
#
sub get_hb_lib_path {
	my $arch = `uname -m`;
	chomp $arch;
	if ($arch eq "x86_64") {
		return "/usr/lib64/heartbeat";
	}
	return "/usr/lib/heartbeat";
}

#
# Prints heartbeat info, then waits 25 seconds for events, then it quits, so it # can get restarted again. This timeout is required so that a connection loss 
# can be detected.
#
sub get_cluster_events {
	my $info = get_cluster_info();
	if ($info) {
		print "---start---\n";
		print $info;
		print "---done---\n";
		my $last_info = $info;

		my $rw_socket_name;
		if (-S "/var/run/crm/cib_rw") {
			$rw_socket_name = "/var/run/crm/cib_rw";
		} elsif (-S "/var/run/heartbeat/crm/cib_rw") {
			$rw_socket_name = "/var/run/heartbeat/crm/cib_rw";
		} else {
			print "---start---\n";
			print "ERROR: could not find cib_rw socket.\n";
			print "---done---\n";
			return;
		}
		my $cb_socket_name;
		if (-S "/var/run/crm/cib_callback") {
			$cb_socket_name = "/var/run/crm/cib_callback";
		} elsif (-S "/var/run/heartbeat/crm/cib_callback") {
			$cb_socket_name = "/var/run/heartbeat/crm/cib_callback";
		} else {
			print "---start---\n";
			print "ERROR: could not find cib_callback socket.\n";
			print "---done---\n";
			return;
		}
		
		socket(my $RW, PF_UNIX, SOCK_STREAM, 0);
		connect($RW, sockaddr_un($rw_socket_name))
		    or return "ERROR: Can't connect to $rw_socket_name: $!";
		select($RW); $| = 1; select (STDOUT);

		socket(my $CB, PF_UNIX, SOCK_STREAM, 0);
		connect($CB, sockaddr_un($cb_socket_name))
		    or return "ERROR: Can't connect to $cb_socket_name: $!";
		select($CB); $| = 1; select (STDOUT);
		my $msg = get_message($RW);
		close $RW;
		my ($op, $clientid, $token) = split /\n/, $msg;
		$clientid=~s/.*=//;
		$token=~s/.*=//;
		cib_message($CB, "cib_op=register\n"
				 ."cib_callback_token=$token\n"
				 ."cib_clientname=$clientid\n");

		cib_message($CB, "cib_op=cib_notify\n"
				 ."cib_notify_type=cib_diff_notify\n"
				 ."cib_notify_activate=1\n");
		my $byte;
		my $count = 0;

		my $flags = fcntl($CB, F_GETFL, 0)
		    or return "ERROR: Couldn't get flags for $cb_socket_name : $!\n";
		fcntl($CB, F_SETFL, $flags | O_NONBLOCK)
		    or return "ERROR: Couldn't set flags for $cb_socket_name: $!\n";

		if (my $pid = fork) {
			# wait 25 seconds and kill the child
			sleep 25;
			close $CB;
			kill 1, $pid;
		}  else {
			my $cibevent = 0;
			my $prev_byte = "";
			while (1) {
				my $len = sysread($CB, $byte, 1);
				if ($! == EAGAIN || $len != 1) {
					sleep 1;
					if ($cibevent > 0) {
						my $info = get_cluster_info();
						if ($info
						    && $info ne $last_info) {
							print "---start---\n";
							print $info;
							print "---done---\n";
						}
						$cibevent = 0;
					}
					next;
				}
				if ($prev_byte && $byte ne $prev_byte) {
					$count = 0;
					$prev_byte = "";
				} elsif ($byte eq "%" || $byte eq "<") {
					$prev_byte = $byte;
					$count++;
					if ($count == 3) {
						$cibevent++;
						$prev_byte = "";
						$count = 0;
					}
				} else {
					$count = 0;
					$prev_byte = "";
				}
			}
		}
	} else {
		return "ERROR: cib connection error";
	}
}

#
# Get info from crm_mon and make xml from it. This is used only to find out
# if a resource is running, not running and/or unmanaged
# unmanaged etc.
sub get_resource_status {
	my $in_rsc_list = 0;
	my $info = "";
	for (`crm_mon -1 -r 2>/dev/null`) {
		if (!$in_rsc_list) {
			$in_rsc_list = /^Full list of resources/;
		} else {
			next if /^\t*$/;
			my ($rsc, $type, $running, @rest) = split;
			my $managed;
			my $running_on = "";
			if ($running eq "Started") {
				$running_on = shift @rest;
			}
			if (@rest > 0 and $rest[0] eq "(unmanaged)") {
				$managed = "unmanaged";
			} else {
				$managed = "managed";
			}
			$info.= "  <resource id=\"$rsc\""
				." running=\"$running\""
				." running_on=\"$running_on\""
				." managed=\"$managed\" />\n";
		}
	}
	if ($info) {
		return "<resource_status>\n$info\n</resource_status>\n";
	}
	return "";
}

sub get_cluster_info {
	my $info = get_resource_status();
	my $cibinfo = `/usr/sbin/cibadmin -Ql 2>/dev/null`;
	if ($cibinfo) {
		my $res_status = "res_status";
		my $cibquery = "cibadmin";
		return "$res_status\nok\n$info\n>>>$res_status\n"
		       ."$cibquery\nok\n$cibinfo\n>>>$cibquery\n";
	}
	return "";
}

sub get_cluster_metadata {
	print "<metadata>\n";
	my $libpath = get_hb_lib_path();
	my $pengine = `$libpath/pengine metadata 2>/dev/null`;
	if ($pengine) {
		# remove first line
	 	substr $pengine, 0, index($pengine, "\n") + 1, '';
		print $pengine;
	}
	my $crmd = `$libpath/crmd metadata 2>/dev/null`;
	if ($crmd) {
		# remove first line
	 	substr $crmd, 0, index($crmd, "\n") + 1, '';
		print $crmd;
	}
	print "</metadata>\n";
}

sub get_old_style_resources {
	my $dir = "/etc/ha.d/resource.d/";
	for (`ls $dir 2>/dev/null`) {
		chomp;
		print get_ocf_like_xml($_, $dir, "heartbeat");
	}
}

sub get_lsb_resources {
	my $dir = "/etc/init.d/";
	for (`find $dir -perm -a=x -type f -printf "%f\n"`) {
		chomp;
		print get_ocf_like_xml($_, $dir, "lsb");
	}
}


sub get_ocf_like_xml {
	my $resource = shift;
	my $dir      = shift;
	my $class    = shift;
	my $xml      = <<XML;
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="$resource" class="$class">
<version>0.0</version>

<longdesc lang="en">
$class resource.
</longdesc>
<shortdesc lang="en">$dir$resource</shortdesc>

<parameters>
XML
	for (1..10) {
		$xml .= <<XML;
<parameter name="$_" required="0" unique="0">
<longdesc lang="en">
$_
</longdesc>
<shortdesc lang="en">$_</shortdesc>
<content type="string" default="" />
</parameter>
XML
	}
	$xml .= <<XML;
</parameters>
<actions>
<action name="start"   timeout="15" />
<action name="stop"    timeout="15" />
<action name="status"  timeout="15" />
<action name="monitor" timeout="15" interval="15" start-delay="15" />
<action name="meta-data"  timeout="5" />
</actions>
</resource-agent>
XML
	return $xml;
}

sub get_drbd_xml {
	my %missing; # handlers and startup don't come from drbdsetup xml, so
		     # we parse them out of the man page.
	my @missing;
	my $manpage = `zcat /usr/share/man/man5/drbd.conf.5.gz || cat /usr/share/man/man5/drbd.conf.5`;
	#my $from = "on-io-error";
	my $from = "";

	for my $section ("global", "handlers", "startup") {
		my ($part) = $manpage=~/^\\fB$section\\fR$(.*?)\.TP/sm;
		my @options = $part =~ /\\fB(.*?)\\fR(?!\()/g;
		push @missing, $section;
		$missing{$section} = \@options;
	}

	my @a = $manpage =~/^\\fB(([^\n]*?)(?:\s+\\fI|\\fR$).*?(?:\.RS.*?\.RE\n)?)\.TP/msg;
	my %descs;
	while (@a) {
		if ($from && $a[1] ne "on-io-error") {
			shift @a;
			next;
		}
		$from = "";
		my $desc = shift @a;
		my $command = shift @a;
		for ($desc, $command) {
			s/\\&\././g;
			s/&/&amp;/g;
			s/\\fI(.*?)\\fR/&lt;u&gt;&lt;i&gt;$1&lt;\/i&gt;&lt;\/u&gt;/g; # italic
			s/\\fB(.*?)\\fR/&lt;b&gt;$1&lt;\/b&gt;/g; # bold
			s/\</&lt;/g;
			s/\>/&gt;/g;
			s/\\fB//g;
			s/\.fR//g;
			s/\\fR//g;
			s/\.RS//g;
			s/\.RE//g;
			s/\.TP//g;
			s/\n/&lt;br&gt;\n/g;
		}
		$descs{$command} = "<desc>&lt;html&gt;$desc&lt;/html&gt;</desc>";
	}

	for (@missing) {
		print "<command name=\"$_\">\n";
		for my $option (@{$missing{$_}}) {
			my $desc = $descs{$option};
			my $type = "string";
			my $handlers = "";
			my $default;
			my $min;
			my $max;

			if ($desc) {
				my ($arg) = $desc =~ /^.*?&lt;i&gt;(.*?)&lt;/;
				if (!$arg) {
					$type = "boolean";
				} elsif ($arg eq "count" || $arg eq "time") {
					$type = "numeric";
				}
				my ($part) = $desc =~ /valid options are:(.*)/si;
				if ($part) {
					my @hs = $part =~ /&lt;b&gt;(.*?)&lt;\/b&gt;/g;
					if (@hs > 0) {
						$type = "handler";
						for my $h (@hs) {
							$handlers .= "<handler>$h</handler>";
						}
					}
				}
				if ($type eq "numeric") {
					($default) = $desc =~ /default\s+.*?is\s+(\d+)/i;
					($min, $max) = $desc =~ /from (\d+) to (\d+)/;
				}
			}
			print "\t<option name=\"$option\" type=\"$type\">\n";
			if ($handlers) {
				print "\t\t$handlers\n";
			}
			if (defined $default) {
				print "\t\t<default>$default</default>\n";
			}
			if (defined $min) {
				print "\t\t<min>$min</min>\n";
			}
			if (defined $max) {
				print "\t\t<max>$max</max>\n";
			}
			if ($desc) {
				print "\t\t$desc\n";
			}
			print "\t</option>\n";
		}
		print "</command>\n";
	}

	for ("net", "disk", "syncer") {
		my $xml = `/sbin/drbdsetup xml $_`;
		$xml =~ s/(option name="(.*?)".*?)(<\/option>)/$1.($descs{$2} || "not documented").$3/egs;
		print $xml;
	}
}

#
# Returns a portable command that determines if the init script is in rc?.d
# directories.
sub is_script_rc {
	my $script =  shift;
	return "(/usr/sbin/update-rc.d -n $script defaults 1"
              ." || /sbin/chkconfig --list $script 2>/dev/null"
	      ."|grep ':on') 2>/dev/null"
	      ."|sed s/.*/on/|uniq";
}

#
# Returns a portable command that determines if the init script is running.
sub is_running {
	my $script = shift;
	return <<STATUS;
if (/etc/init.d/openais status 2>&1|grep 'Usage:' >/dev/null); then \
	PROG=/usr/sbin/aisexec; \
	for PID in `pidof \$PROG`; do \
		if [ "\$(readlink -f /proc/\$PID/exe)" = "\$PROG" ]; then \
			exit 0; \
		fi; \
	done; \
        exit 3; \
else \
	/etc/init.d/$script status>/dev/null; \
fi
STATUS
}

sub get_cluster_versions {
	my $libpath = get_hb_lib_path();
	my $hb_version = `$libpath/heartbeat -V 2>/dev/null` || "";
	if ($hb_version) {
		$hb_version =~ s/\s+.*//;
		chomp $hb_version;
	}
	if ($hb_version eq "2.1.3") {
		# sles10 hb 2.1.3 looks like 2.1.4 to me
		my $desc = `/usr/bin/lsb_release -d 2>/dev/null`;
		if ( $desc && $desc =~ /SUSE Linux Enterprise Server 10/) {
			$hb_version = "2.1.4";
		}
	}
	my $pm_version = `$libpath/crmd version 2>/dev/null` || "";
	if ($pm_version) {
		$pm_version =~ s/\s+.*//;
		chomp $pm_version;
	}

	# there is no reliable way to find the installed corosync and openais
	# version, so it is best effort or just "ok" if it is installed
	# after that only the package managers will be asked.
	my $cs_prog = "/usr/sbin/corosync";
	my $cs_version = "";
	if (-e $cs_prog) {
		$cs_version =
		`grep -m 1 -a -o '/BUILD/corosync-[^/]*' /usr/sbin/corosync|sed s/.*-// 2>/dev/null` || "";
		chomp $cs_version;
		if (!$cs_version) {
			$cs_version = "ok";
		}
	}
	my $ais_prog = "/usr/sbin/aisexec";
	my $ais_version = "";
	if (-e $ais_prog) {
		$ais_version =
		`grep -a -o 'subrev [0-9]* version [0-9.]*' /usr/sbin/aisexec|sed 's/.* //'`;
		chomp $ais_version;
		if (!$ais_version) {
			$ais_version = "ok";
		}
	}
	my $hb_isrc_cmd = is_script_rc("heartbeat");
	my $ais_isrc_cmd = is_script_rc("openais");
	my $hb_isrc = `$hb_isrc_cmd` || "off";
	my $ais_isrc = `$ais_isrc_cmd` || "off";
	chomp $hb_isrc;
	chomp $ais_isrc;

	my $hb_running_cmd = "$libpath/heartbeat -s";
	my $ais_running_cmd = is_running("openais");
	my $hb_running = system("$hb_running_cmd 2>/dev/null") >> 8 || "on";
	my $ais_running = system("$ais_running_cmd 2>/dev/null") >> 8 ||  "on";
	my $drbd_loaded = system("lsmod |grep '\\<drbd\\>'") >> 8 || "on";
	my $hb_conf = system("ls /etc/ha.d/ha.cf 2>/dev/null") >> 8 || "on";
	my $ais_conf = system("ls /etc/ais/openais.conf 2>/dev/null") >> 8 || "on";
	chomp $hb_running;
	chomp $ais_running;
	return "hb:$hb_version\n"
	       ."pm:$pm_version\n"
	       ."cs:$cs_version\n"
	       ."ais:$ais_version\n"
	       ."hb-rc:$hb_isrc\n"
	       ."ais-rc:$ais_isrc\n"
	       ."hb-running:$hb_running\n"
	       ."ais-running:$ais_running\n"
	       ."hb-conf:$hb_conf\n"
	       ."ais-conf:$ais_conf\n"
	       ."drbd-loaded:$drbd_loaded\n"
}
