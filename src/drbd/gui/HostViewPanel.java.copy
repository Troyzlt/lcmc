
package drbd.gui;

import drbd.data.Host;
import drbd.utilities.Tools;
import drbd.utilities.MyButton;
import drbd.utilities.ConnectionCallback;
import drbd.EditHostDialog;
import drbd.utilities.ExecCallback;
//import drbd.utilities.States;

import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Color;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

/**
 * An implementation of a host view with tree of resources. This view is used
 * in the host tab as well in the cluster tab.
 *
 * @author Rasto Levrinc
 * @version $Id$
 *
 */
public class HostViewPanel extends ViewPanel implements ActionListener {
    /** Serial version UID. */
    private static final long serialVersionUID = 1L;
    /** Host data object. */
    private final Host host;
    /** Connect button. */
    private final MyButton connectButton;
    /** Foreground of the connect button. */
    private final Color connectButtonForeground;

    /**
     * Prepares a new <code>HostViewPanel</code> object.
     */
    public HostViewPanel(final Host host) {
        super();

        this.host = host;

        createHostView();
        connectButton = new MyButton("");

        setConnected();

        connectButtonForeground = connectButton.getForeground();
        final MyButton wizardButton = new MyButton(
                            Tools.getString("HostViewPanel.WizardButton"));

        connectButton.addActionListener(this);
        wizardButton.addActionListener(this);
        final JPanel buttonPanel = new JPanel(new FlowLayout());
        buttonPanel.add(connectButton);
        buttonPanel.add(wizardButton);
        final JPanel buttonArea = new JPanel(new BorderLayout());
        buttonArea.add(buttonPanel, BorderLayout.WEST);
        add(buttonArea, BorderLayout.NORTH);
    }

    /**
     * Sets connected button string and foreground depending on if it is
     * connected or disconnected.
     */
    public final void setConnected() {
        connectButton.setForeground(connectButtonForeground);
        if (host.isConnected()) {
            connectButton.setText(Tools.getString(
                                           "HostViewPanel.DisconnectButton"));
        } else {
            connectButton.setText(Tools.getString(
                                           "HostViewPanel.ConnectButton"));
        }
    }

    /**
     * Creates host and updates the tree.
     */
    private void createHostView() {
        host.getBrowser().updateHWResources(host.getNetInterfaces(),
                                                 host.getBlockDevices(),
                                                 host.getFileSystems());
    }

    /**
     * Make an ssh connection to the host.
     */
    public final void connect() {
        if (host.isConnected()) {
            connectButton.setText(
                        Tools.getString("HostViewPanel.DisconnectButton"));
            connectButton.setForeground(connectButtonForeground);
        } else {
            connectButton.setEnabled(false);
            Tools.startProgressIndicator(host,
                                         "Connecting "
                                         + host.getName()
                                         + "...");

            final SSHGui sshGui = new SSHGui(Tools.getGUIData().getMainFrame(),
                                             host,
                                             null);

            host.connect(sshGui,
                                new ConnectionCallback() {
                                    public void done(final int flag) {
                                        setConnected();
                                        connectButton.setEnabled(true);
                                        getInfo();
                                        Tools.stopProgressIndicator(
                                                              host,
                                                              "Connecting "
                                                              + host.getName()
                                                              + "...");
                                       // refresh();
                                    }

                                    public void doneError(
                                                    final String errorText) {
                                        connectButton.setForeground(Color.RED);
                                        connectButton.setEnabled(true);
                                        host.setLoadingError();
                                        //States.interrupt("load:"
                                        //                 + host.getName());
                                        Tools.stopProgressIndicator(
                                                            host,
                                                            "Connecting "
                                                            + host.getName()
                                                            + "...");
                                    }
                                });
        }
    }

    /**
     * Gets and stores info about the host.
     */
    public final void getInfo() {
        host.removeNetInterfaces();
        host.getSSH().installGuiHelper();
        host.execCommand("GetHostInfo",
                         new ExecCallback() {
                             public void done(final String ans) {
                                 host.parseHostInfo(ans);
                                 host.setLoadingDone();
                                 //States.done("load:" + host.getName());
                             }

                             public void doneError(final String ans,
                                                   final int exitCode) {
                                 host.setLoadingError();
                                 //States.interrupt("load:" + host.getName());
                             }
                         }, false);
    }

    /**
     * Callbacks for buttons.
     */
    public final void actionPerformed(final ActionEvent e) {
        final String command = e.getActionCommand();
        if (command.equals(Tools.getString("HostViewPanel.ConnectButton"))) {
            connect();
        } else if (command.equals(
                        Tools.getString("HostViewPanel.DisconnectButton"))) {
            connectButton.setEnabled(false);
            host.disconnect();
            connectButton.setText(
                              Tools.getString("HostViewPanel.ConnectButton"));
            connectButton.setEnabled(true);
        } else if (command.equals(
                              Tools.getString("HostViewPanel.WizardButton"))) {
            final EditHostDialog dialog = new EditHostDialog(host);
            dialog.showDialogs();
        }
    }

    /**
     * Refreshes the host data in the view.
     */
    public final void refresh() {
        host.getBrowser().getTreeModel().reload();

    }

    /**
     * Gets host object.
     */
    public final Host getHost() {
        return host;
    }
}
