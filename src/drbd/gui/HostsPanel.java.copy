
package drbd.gui;

import drbd.data.Host;
import drbd.data.Hosts;
import drbd.utilities.Tools;

import java.util.Iterator;

import javax.swing.JTabbedPane;
import javax.swing.event.ChangeListener;
import javax.swing.event.ChangeEvent;
import javax.swing.ImageIcon;
import javax.swing.JPanel;
import java.awt.Component;

import java.awt.GridLayout;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;

/**
 * An implementation of a panel that holds host tabs. Changing of the tab,
 * changes also host that is shown in the terminal panel.
 *
 * @author Rasto Levrinc
 * @version $Id$
 *
 */
public class HostsPanel extends JPanel implements PropertyChangeListener {
    /** Serial version UID. */
    private static final long serialVersionUID = 1L;
    /** Tabbed pane with hosts. */
    private JTabbedPane tabbedPane;
    /** Host icon. */
    private static final ImageIcon HOST_ICON =
                                Tools.createImageIcon(Tools.getDefault(
                                                    "HostsPanel.HostIcon"));
    /** New empty host tab. */
    private static final HostTab newHostTab = new HostTab(null);
    /** Previously selected tab. */
    private HostTab prevSelected = null;

    /**
     * Prepares a new <code>HostsPanel</code> object.
     */
    public HostsPanel() {
        super(new GridLayout(1, 1));
        setBackground(Tools.getDefaultColor("HostsTab.Background"));
        addPropertyChangeListener(this);
        showGUI();
    }

    /**
     * shows empty tabbed pane
     */
    private void showGUI() {
        Tools.getGUIData().setHostsPanel(this);

        tabbedPane = new JTabbedPane();
	tabbedPane.setTabPlacement(JTabbedPane.TOP); 

        addAllTabs();
        add(tabbedPane);
	this.setBorder(javax.swing.BorderFactory.createLineBorder(Tools.getDefaultColor("HostsTab.Background"),3));
        tabbedPane.setTabLayoutPolicy(JTabbedPane.SCROLL_TAB_LAYOUT);

        /* Register a change listener.
         * This causes terminal panel to show correct host, after clicking on
         * the host tab. */
        tabbedPane.addChangeListener(new ChangeListener() {
            public void stateChanged(final ChangeEvent evt) {
                final HostTab source = prevSelected;
                prevSelected = (HostTab) ((JTabbedPane) evt.getSource()).getSelectedComponent();
                String sourceName = null;
                if (source != null) {
                    sourceName = source.getName();
                }
                if (sourceName == null) {
                    return;
                }
                final HostTab ht = getHostTab();
                if (ht != null) {
                    final Host host = ht.getHost();
                    if (host != null) {
                        Tools.getGUIData().setTerminalPanel(
                                                    host.getTerminalPanel()); 
                    }
                }
            }
        });
    }
   
    /**
     * adds new host tab.
     */
    public final void addTab(final Host host) {
        removeEmptyTab();
        final HostTab ht = new HostTab(host);
        host.setHostTab(ht);
        tabbedPane.addTab(host.getName(), 
                          HOST_ICON, 
                          ht,
                          host.getIp());
        tabbedPane.setSelectedComponent(ht);
        tabbedPane.invalidate();
        tabbedPane.validate();
        tabbedPane.repaint();
        ht.addHostView();
        addEmptyTab();
    }

    /**
     * Adds epmty tab, that opens new host dialogs.
     */
    private void addEmptyTab() {
        tabbedPane.addTab("", 
                          null, 
                          newHostTab,
                          Tools.getString("HostsPanel.NewTabTip"));
    }

    /**
     * Removes empty tab.
     */
    private void removeEmptyTab() {
        if (tabbedPane.getTabCount() > 0) {
            tabbedPane.remove(tabbedPane.getTabCount() - 1);
        }
    }
   
    /**
     * removes selected tab, after clicking on the cancel button in the config
     * dialogs.
     */
    public void removeTab() {
        final Component selected = tabbedPane.getSelectedComponent();
        int index = tabbedPane.getSelectedIndex() - 1;
        if (index < 0) {
            index = 0;
        }
        if (selected != null) {
            /* deselecting so that dialogs don't appear */
            tabbedPane.setSelectedIndex(index); 
            tabbedPane.remove(selected);
            tabbedPane.remove(selected);
        }
    }

    /**
     * Removes all tabs.
     */
    public void removeAllTabs() {
        tabbedPane.removeAll();
        addEmptyTab();
    }

    /**
     * renames selected tab.
     */
    public void renameSelectedTab(final String newName) {
        tabbedPane.setTitleAt(tabbedPane.getSelectedIndex(), newName);
        tabbedPane.invalidate();
        tabbedPane.repaint();
    }

    /**
     * adds all host tabs, e.g. after loading of configuration.
     */
    private void addAllTabs() {
        final Hosts hosts = Tools.getConfigData().getHosts();
        if (hosts != null) {
            final Iterator it = hosts.getHostSet().iterator();
            while (it.hasNext()) {
                final Host host = (Host)it.next();
                addTab(host);
            }
        }
        addEmptyTab();
    }

    /**
     * Removes all tabs and adds them back, also a way to repaint them.
     */
    public void repaintTabs() {
        tabbedPane.removeAll();
        addAllTabs();
    }
   
    /**
     * Shows correct host in the terminal panel after changing from cluster
     * to host shade.
     */
    public void propertyChange(final PropertyChangeEvent e) {
	if (e.getNewValue() != null) {
            final HostTab ht = getHostTab();
            if (ht != null && ht.getHost() != null)  {
                Tools.getGUIData().setTerminalPanel(
                                            ht.getHost().getTerminalPanel());
            }
	}
    }
    
    /**
     * Returns host tab, that is in the JScrollPane.
     */
    private HostTab getHostTab() {
        final Component ht = tabbedPane.getSelectedComponent();
        if (ht == null) {
            return null;
        } else {
            return (HostTab)ht;
        }
    }

    /**
     * Sets which tab with which host should be selected.
     */
    public void setSelectedTab(final Host host) {
        HostTab ht = null;
        if (host != null) {
            ht = host.getHostTab();
        }
        tabbedPane.setSelectedComponent(ht);
    }
}
